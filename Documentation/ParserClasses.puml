@startuml Parser classes


abstract class BasicStatement {
    - className: std::string
    ' -1 = error, 0 = next, else the line to jump to
    + {abstract} execute(console: BasicConsole&, v: BasicEnv&): int {returns -1 <= ret <= 2^63-1}
    # {abstract} property_string(): std::string
    + to_string(): std::string
}

abstract class BasicExpression {
    - className: std::string
    # property_string(): std::string
    + {abstract} eval(v: BasicEnv&): int
    + to_string(): std::string
}

class BasicUnaryExpression extends BasicExpression {
    - isMinus: bool
    - expr: std::unique_ptr<BasicExpression>
    + eval(env: BasicEnv&): int
    # property_string(): std::string
}

class BasicIntExpression extends BasicExpression {
    - value: int
    # property_string(): std::string
    + eval(v: BasicEnv&): int
}

class BasicVarExpression extends BasicExpression {
    - value: char
    # property_string(): std::string
    + eval(v: BasicEnv&): int
}

class BasicBinaryExpression extends BasicExpression {
    - lexpr: std::unique_ptr<BasicExpression>
    - rexpr: std::unique_ptr<BasicExpression>
    - op: BasicBinOp
    # property_string(): std::string
    + eval(v: BasicEnv&): int
}

enum BasicBinOp {
    PLUS,
    MINUS,
    MUL,
    DIV,
}

BasicBinaryExpression o-- BasicBinOp

class BasicExpressionList {
    + this: std::list<std::unique_ptr<BasicExpression>>
}

class BasicPrintStatement extends BasicStatement {
    - expr_list: BasicExpressionList
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

BasicPrintStatement o-- BasicExpressionList

class BasicIfStatement extends BasicStatement {
    - lcondition: std::unique_ptr<BasicExpression>
    - op: BasicRelOperation
    - rcondition: std::unique_ptr<BasicExpression>
    - stmt: std::unique_ptr<BasicStatement>
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

class BasicGotoStatement extends BasicStatement {
    - expr: std::unique_ptr<BasicExpression>
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

class BasicInputStatement extends BasicStatement {
    - vars: std::list<char>
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

class BasicLetStatement extends BasicStatement {
    - variable: char
    - expr: std::unique_ptr<BasicExpression>
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

class BasicGoSubStatement extends BasicStatement {
    - expr: std::unique_ptr<BasicExpression>
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

class BasicReturnStatement extends BasicStatement {
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

class BasicRunStatement extends BasicStatement {
    # property_string(): std::string
    + execute(console: BasicConsole&, env: BasicEnv&): int
}

enum BasicRelOperation {
    LOWER,
    GREATER,
    NOT_EQUALS,
    EQUALS,
    LOWER_EQUALS,
    GREATER_EQUALS,
}

class BasicTokenList {
    this: std::list<BasicToken>
}

class BasicParser {
    + parseLine(console: BasicConsole&, ts: BasicTokenList&): std::unique_ptr<BasicStatement>
    + parseExpression(console: BasicConsole&, ts: BasicTokenList&): std::unique_ptr<BasicExpression>
    + parseStatement(console: BasicConsole&, ts: BasicTokenList&): std::unique_ptr<BasicStatement>
    + parseVarList(console: BasicConsole&, ts: BasicTokenList&): std::list<char>
    + parseBinExpression(console: BasicConsole&, ts: BasicTokenList&): std::unique_ptr<BasicExpression>
    + parseSimpleExpression(console: BasicConsole&, ts: BasicTokenList&): std::unique_ptr<BasicExpression>
    + parseExpressionList(console: BasicConsole&, ts: BasicTokenList&): std::list<std::unique_ptr<BasicExpression>>
    + parseOp(console: BasicConsole&, ts: BasicTokenList&): std::tuple<BasicBinOp, int, int>
}

BasicIfStatement o-- BasicExpression
BasicIfStatement o-- BasicStatement
BasicPrintStatement o-- BasicExpression
BasicIfStatement o-- BasicOperation
BasicGotoStatement o-- BasicExpression
BasicLetStatement o-- BasicExpression
BasicGoSubStatement o-- BasicExpression

@enduml
